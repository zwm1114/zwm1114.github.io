<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一颗土豆子</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-27T02:50:16.395Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zoe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitignore和Gitmoji的使用</title>
    <link href="http://yoursite.com/2019/10/12/gitignore%E5%92%8CGitmoji%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/12/gitignore%E5%92%8CGitmoji%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-10-12T11:52:56.000Z</published>
    <updated>2021-02-27T02:50:16.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitignore和Gitmoji的使用"><a href="#gitignore和Gitmoji的使用" class="headerlink" title=".gitignore和Gitmoji的使用"></a>.gitignore和Gitmoji的使用</h3><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208" target="_blank" rel="noopener">廖雪峰老师的git教程</a></p><h4 id="gitignore实践"><a href="#gitignore实践" class="headerlink" title=".gitignore实践"></a>.gitignore实践</h4><p>例如现在在这个文件目录中想提交所有的类型名为.c的文件，.exe的文件不提交。</p><h5 id="1-创建-gitignore文件"><a href="#1-创建-gitignore文件" class="headerlink" title="1.创建.gitignore文件"></a>1.创建.gitignore文件</h5><p>方法：在目标文件的根目录下新建一个文本文档，文件夹命名时输入 <code>.gitignore.</code>，注意后面有个点。</p><h5 id="2-添加需要忽略上传的文件"><a href="#2-添加需要忽略上传的文件" class="headerlink" title="2.添加需要忽略上传的文件"></a>2.添加需要忽略上传的文件</h5><p>打开.gitignore文件，进行编辑，添加要忽略上传的文件或文件夹，例如这里需要忽略test文件夹和.exe文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*.exe</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>这里.exe和test文件就被忽略了，也不会提交到仓库里了。</p><h4 id="Gitmoji的使用"><a href="#Gitmoji的使用" class="headerlink" title="Gitmoji的使用"></a>Gitmoji的使用</h4><p>例如：<code>git commit -m &quot;:bug:just a test!&quot;</code></p><p><a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">Emoji在这里</a></p><p>以后每次提交代码都是一种乐趣了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gitignore和Gitmoji的使用&quot;&gt;&lt;a href=&quot;#gitignore和Gitmoji的使用&quot; class=&quot;headerlink&quot; title=&quot;.gitignore和Gitmoji的使用&quot;&gt;&lt;/a&gt;.gitignore和Gitmoji的使用&lt;/h3</summary>
      
    
    
    
    <category term="常用技能" scheme="http://yoursite.com/categories/常用技能/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>斐波那契数列</title>
    <link href="http://yoursite.com/2019/07/27/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://yoursite.com/2019/07/27/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2019-07-27T04:18:03.000Z</published>
    <updated>2021-03-01T15:00:46.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>古典问题：斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”。有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p><p>斐波那契数列：0 1 1 2 3 5 8 13 ……</p><p>题目要求：输出20项斐波那契数列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f1 = <span class="number">1</span>,f2 = <span class="number">2</span>,f3;</span><br><span class="line"><span class="keyword">int</span> i; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"前20项的斐波那契数列：\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;=<span class="number">20</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%12ld"</span>,f1);</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">f3 = f1 + f2;</span><br><span class="line">f1 = f2;</span><br><span class="line">f2 = f3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="知识拓展：printf函数"><a href="#知识拓展：printf函数" class="headerlink" title="知识拓展：printf函数"></a>知识拓展：printf函数</h4><h5 id="常用转换说明"><a href="#常用转换说明" class="headerlink" title="常用转换说明"></a>常用转换说明</h5><ul><li><p>%d 有符号十进制整数</p></li><li><p>%c 单个字符</p></li><li><p>%f 浮点数，十进制计数法</p></li><li><p>%e 浮点数，e计数法</p></li><li><p>%% 打印%号</p></li><li><h5 id="转换修饰说明符"><a href="#转换修饰说明符" class="headerlink" title="转换修饰说明符"></a>转换修饰说明符</h5></li><li><p>.数字 例如：“%5.2f”打印一个浮点数，字段宽度为5字符，其中小数点后有两位数字</p></li></ul><h5 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h5><ul><li>- 待打印项左对齐</li><li>+若符号值为正，则在值前面现实加号；若为负，则在值前面显示减号</li><li>空格 若符号值为正，则在值前面显示空格；若为负，则在值前面显示减号，例如 <code>printf(&quot;% 6.2f&quot;,i)</code>,若 <code>i=1.333</code>,打印出来的结果是 <code>1.33</code>（注意前面有空格），字段宽度为6个字符且包括空格，若 <code>i=-1.333</code>,打印出来的结果是 <code>-1.33</code>，同样前面也有空格</li><li>0 用0来填充字段宽度，例如 <code>printf(&quot;%0.6f&quot;,i)</code>,打印出的结果是 <code>1.333000</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h3&gt;&lt;p&gt;古典问题：斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家莱昂纳多·斐波那契</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>求最大公约数和最小公倍数</title>
    <link href="http://yoursite.com/2019/07/13/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/07/13/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-03-01T15:14:12.557Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求最大公约数和最小公倍数"><a href="#求最大公约数和最小公倍数" class="headerlink" title="求最大公约数和最小公倍数"></a>求最大公约数和最小公倍数</h3><p>输入两个正整数m和n，求其最大公约数和最小公倍数</p><p>最大公约数：只两个或多个整数公有约数中最大的一个</p><p>最小公倍数：两个或多个整数公有的倍数叫做他们的公倍数，其中除0以外最小的一个倍数就叫做这几个整数的最小公倍数</p><p>最大公约数和最小公倍数的关系：最小公倍数 = 两个数的乘积 / 最大公约数</p><p>ps:暂不考虑0的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">commonDivisor</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author:zoe</span></span><br><span class="line"><span class="comment">  Date: 2021/3/1 14:40:29</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">commonDivisor</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> bigger = m &gt; n?m:n;</span><br><span class="line"><span class="keyword">int</span> smaller = m &lt; n?m:n;</span><br><span class="line"><span class="keyword">int</span> i,commonDivisor = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(bigger % smaller == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> smaller;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; smaller; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(smaller % i == <span class="number">0</span> &amp;&amp; bigger % i== <span class="number">0</span> &amp;&amp; commonDivisor &lt; i)&#123;</span><br><span class="line">commonDivisor = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> commonDivisor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> comDivisor;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input two numbers:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;m,&amp;n);</span><br><span class="line">comDivisor = commonDivisor(m,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"common divisor is: %d\n"</span>,comDivisor);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"common multiple is: %d\n"</span>,(m*n)/comDivisor);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法，求最大公约数是用一个for循环找到两个数的公约数，最大者即为最大公约数，下面的方法是用辗转相除法求最大公约数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">commonDivisor</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">    <span class="comment">//m始终是较大的数</span></span><br><span class="line"><span class="keyword">if</span>(m &lt; n)&#123;</span><br><span class="line">temp = m;</span><br><span class="line">m = n;</span><br><span class="line">n = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辗转相除法</span></span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">temp = m % n;</span><br><span class="line">m = n;</span><br><span class="line">n = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;求最大公约数和最小公倍数&quot;&gt;&lt;a href=&quot;#求最大公约数和最小公倍数&quot; class=&quot;headerlink&quot; title=&quot;求最大公约数和最小公倍数&quot;&gt;&lt;/a&gt;求最大公约数和最小公倍数&lt;/h3&gt;&lt;p&gt;输入两个正整数m和n，求其最大公约数和最小公倍数&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>三个数从小到大顺序输出</title>
    <link href="http://yoursite.com/2019/07/13/%E4%B8%89%E4%B8%AA%E6%95%B0%E4%BB%8E%E5%B0%8F%E5%88%B0%E5%A4%A7%E9%A1%BA%E5%BA%8F%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2019/07/13/%E4%B8%89%E4%B8%AA%E6%95%B0%E4%BB%8E%E5%B0%8F%E5%88%B0%E5%A4%A7%E9%A1%BA%E5%BA%8F%E8%BE%93%E5%87%BA/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-03-01T15:14:20.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三个数从小到大顺序输出"><a href="#三个数从小到大顺序输出" class="headerlink" title="三个数从小到大顺序输出"></a>三个数从小到大顺序输出</h3><p>从键盘输入三个数，将3个数字从小到大进行排序顺序输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *,<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author:zoe</span></span><br><span class="line"><span class="comment">  Date: 2021/3/1 16:41:59</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *m,<span class="keyword">int</span> *n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp = *m;</span><br><span class="line">*m = *n;</span><br><span class="line">*n = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input 3 numbers:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort</span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">swap(&amp;a,&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a &gt; c)&#123;</span><br><span class="line">swap(&amp;a,&amp;c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b &gt; c)&#123;</span><br><span class="line">swap(&amp;b,&amp;c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,a,b,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外的方法，可以用通用工具库中的qsort函数，该函数原型在stdlib.h头文件中。</p><p>下面的程序可以对一串数从小到大的排序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p1,<span class="keyword">const</span> <span class="keyword">void</span> *p2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* code */</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input 10 numbers:"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">qsort(arr,<span class="number">10</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,*(arr+i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *p1,<span class="keyword">const</span> <span class="keyword">void</span> *p2)</span></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *a = (<span class="keyword">const</span> <span class="keyword">int</span> *) p1;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *b = (<span class="keyword">const</span> <span class="keyword">int</span> *) p2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*a &lt; *b)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(*a == *b)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="知识拓展：qsort函数"><a href="#知识拓展：qsort函数" class="headerlink" title="知识拓展：qsort函数"></a>知识拓展：qsort函数</h5><p>函数原型：<code>void qsort(void *base,size_t nmemb,size_t size,int (\*compar)(const void *,const void *));</code></p><p>第一个参数是指针，指向待排序数组的首元素</p><p>第二个参数是带排序的数量</p><p>第三个参数是数组中每个元素的大小，通常是：sizeof(类型)</p><p>第四个参数是一个指向函数的指针，这个函数用于确定排序的顺序，上述程序中，p1和p2都是指向void的，所以必须在比较函数内部声明两个类型正确的指针，并初始化他们指向作为参数传入的值。修改该函数，可以改变排序的顺序是从大到小还是从小到达。</p><h5 id="知识拓展：C和C-中的void"><a href="#知识拓展：C和C-中的void" class="headerlink" title="知识拓展：C和C++中的void*"></a>知识拓展：C和C++中的void*</h5><p>两种语言中，都可以把任何类型的指针赋给void类型的指针，但是C++要求在把void*指针赋给任何类型的指针时必须进行强制类型转换。而C没有这样的要求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;三个数从小到大顺序输出&quot;&gt;&lt;a href=&quot;#三个数从小到大顺序输出&quot; class=&quot;headerlink&quot; title=&quot;三个数从小到大顺序输出&quot;&gt;&lt;/a&gt;三个数从小到大顺序输出&lt;/h3&gt;&lt;p&gt;从键盘输入三个数，将3个数字从小到大进行排序顺序输出&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>廖雪峰Git教程笔记整理</title>
    <link href="http://yoursite.com/2019/07/13/git%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/13/git%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-02-27T02:23:28.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提交代码三步走："><a href="#提交代码三步走：" class="headerlink" title="提交代码三步走："></a>提交代码三步走：</h3><h4 id="添加文件到暂存区：git-add"><a href="#添加文件到暂存区：git-add" class="headerlink" title="添加文件到暂存区：git add"></a>添加文件到暂存区：git add</h4><ol><li>添加一个或多个文件到暂存区：如 <code>git add README hello.php</code></li><li>添加当前目录下的所有文件到暂存区：<code>git add .</code></li><li>添加指定目录到暂存区：<code>git add dir</code></li></ol><h4 id="将暂存区内容添加到本地仓库：git-commit"><a href="#将暂存区内容添加到本地仓库：git-commit" class="headerlink" title="将暂存区内容添加到本地仓库：git commit"></a>将暂存区内容添加到本地仓库：git commit</h4><ol><li>将暂存区的文件全部提交到本地仓库：如<code>git commit -m &#39;message&#39;</code></li><li>提交暂存区的指定文件到仓库区：如<code>git commit text.c -m &#39;message&#39;</code></li><li>修改后不需要执行 <code>git add</code>命令直接来提交：如 <code>git commit -a &#39;message&#39;</code></li></ol><h4 id="上传远程代码并合并：git-push"><a href="#上传远程代码并合并：git-push" class="headerlink" title="上传远程代码并合并：git push"></a>上传远程代码并合并：git push</h4><ol><li>将本地仓库中的代码上传到远程仓库：<code>git push</code></li><li>本地分支版本上传到远程并合并：git push 远程主机名 本地分支名：远程分支名（本地分支名和远程分支名相同的话，可以省略冒号，如 <code>git push origin master</code>)</li></ol><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><p>查看哪些文件修改了：<code>git status</code></p><p>查看修改的内容：<code>git diff</code></p><p>查看提交日志：<code>git log</code></p><p>简化日志信息：<code>git log --pretty=oneline</code></p><h3 id="一、版本管理"><a href="#一、版本管理" class="headerlink" title="一、版本管理"></a>一、版本管理</h3><h4 id="1-把当前版本回退到上一个版本"><a href="#1-把当前版本回退到上一个版本" class="headerlink" title="1.把当前版本回退到上一个版本"></a>1.把当前版本回退到上一个版本</h4><p><code>git reset --hard HEAD^</code></p><p><code>git  &lt;filename&gt;</code>    //查看文件内容</p><h4 id="2-回退到上一个版本之后又想回到这个版本"><a href="#2-回退到上一个版本之后又想回到这个版本" class="headerlink" title="2.回退到上一个版本之后又想回到这个版本"></a>2.回退到上一个版本之后又想回到这个版本</h4><p>找到该版本号（无需写全，只需写前几位，多写几位不然找不到的…）</p><p><code>git reset --hard  &lt;id&gt;</code></p><h4 id="3-当前窗口已关闭，还想回到某一个版本"><a href="#3-当前窗口已关闭，还想回到某一个版本" class="headerlink" title="3.当前窗口已关闭，还想回到某一个版本"></a>3.当前窗口已关闭，还想回到某一个版本</h4><p><code>git reflog</code>    //找到版本id</p><p><code>git reset --hard  &lt;id&gt;</code></p><h3 id="二、工作区与版本库"><a href="#二、工作区与版本库" class="headerlink" title="二、工作区与版本库"></a>二、工作区与版本库</h3><p>理解他们很重要!</p><p>commit 后，用 <code>git diff HEAD -- &lt;filename&gt;</code> 查看工作区和版本库里最新版本的区别。</p><h4 id="1-没使用add和commit"><a href="#1-没使用add和commit" class="headerlink" title="1.没使用add和commit"></a>1.没使用add和commit</h4><p><code>git checkout -- &lt;filename&gt;</code>    //丢弃文件的修改内容</p><h4 id="2-使用了add-，未使用-commit"><a href="#2-使用了add-，未使用-commit" class="headerlink" title="2.使用了add ，未使用 commit"></a>2.使用了add ，未使用 commit</h4><p><code>git reset HEAD &lt;filename&gt;</code>    //相当于撤销掉了add命令</p><h4 id="3-使用了add和commit命令"><a href="#3-使用了add和commit命令" class="headerlink" title="3.使用了add和commit命令"></a>3.使用了add和commit命令</h4><p>版本回退</p><h3 id="三、删除文件"><a href="#三、删除文件" class="headerlink" title="三、删除文件"></a>三、删除文件</h3><p>add和commit 之后想删除文件</p><h4 id="1-确实想删除"><a href="#1-确实想删除" class="headerlink" title="1.确实想删除"></a>1.确实想删除</h4><p><code>git rm &lt;filename&gt;</code></p><p><code>git commit -m &quot;XXX&quot;</code></p><h4 id="2-手滑"><a href="#2-手滑" class="headerlink" title="2.手滑"></a>2.手滑</h4><p><code>git checkout -- &lt;filename&gt;</code>    //一键还原，就是用版本库里的版本替换工作区的版本</p><p>ps:从未添加进版本库里的被删除的文件是无法恢复的!</p><h3 id="四、远程仓库"><a href="#四、远程仓库" class="headerlink" title="四、远程仓库"></a>四、远程仓库</h3><h4 id="1-初始化本地仓库"><a href="#1-初始化本地仓库" class="headerlink" title="1.初始化本地仓库"></a>1.初始化本地仓库</h4><p><code>git init</code></p><h4 id="2-添加远程仓库"><a href="#2-添加远程仓库" class="headerlink" title="2.添加远程仓库"></a>2.添加远程仓库</h4><p><code>git remote add &lt;name&gt; &lt;SSH/Https&gt;</code></p><h4 id="3-把本地库的内容推送到远程库"><a href="#3-把本地库的内容推送到远程库" class="headerlink" title="3.把本地库的内容推送到远程库"></a>3.把本地库的内容推送到远程库</h4><p>如果远程库是空的：<code>git push -u &lt;name&gt; &lt;branchname&gt;</code>    //第一次推送，本地分支与远程分支关联起来</p><p>非空：<code>git push &lt;name&gt; &lt;branchname&gt;</code>    //提交</p><h4 id="4-从远程库克隆"><a href="#4-从远程库克隆" class="headerlink" title="4.从远程库克隆"></a>4.从远程库克隆</h4><p><code>git clone &lt;SSH/Https&gt;</code>    //推荐使用SSH</p><h3 id="五、新建分支"><a href="#五、新建分支" class="headerlink" title="五、新建分支"></a>五、新建分支</h3><h4 id="1-创建分支"><a href="#1-创建分支" class="headerlink" title="1.创建分支"></a>1.创建分支</h4><p><code>git checkout -b &lt;branchname&gt;</code></p><h4 id="2-查看当前分支"><a href="#2-查看当前分支" class="headerlink" title="2.查看当前分支"></a>2.查看当前分支</h4><p><code>git branch</code></p><h4 id="3-切换回某个分支"><a href="#3-切换回某个分支" class="headerlink" title="3.切换回某个分支"></a>3.切换回某个分支</h4><p><code>git checkout &lt;branchname&gt;</code></p><h4 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4.合并分支"></a>4.合并分支</h4><p><code>git merge &lt;branchname&gt;</code></p><p>ps:这种合并是快速合并，另外有 –no-ff方式合并分支</p><p><code>git merge --no-ff -m &#39;XXX&#39; &lt;branchname&gt;</code></p><h4 id="5-合并完分支可以删除分支"><a href="#5-合并完分支可以删除分支" class="headerlink" title="5.合并完分支可以删除分支"></a>5.合并完分支可以删除分支</h4><p><code>git branch -d &lt;branchname&gt;</code>    //删除分支</p><h3 id="六、解决冲突"><a href="#六、解决冲突" class="headerlink" title="六、解决冲突"></a>六、解决冲突</h3><h4 id="1-当两个分支都有了各自的提交"><a href="#1-当两个分支都有了各自的提交" class="headerlink" title="1.当两个分支都有了各自的提交"></a>1.当两个分支都有了各自的提交</h4><p>需要手动修改不同的内容，然后add，commit</p><p>ps: <code>git log --graph --pretty=oneline --abbrev -commit</code></p><h3 id="七、分支管理策略"><a href="#七、分支管理策略" class="headerlink" title="七、分支管理策略"></a>七、分支管理策略</h3><h4 id="1-最佳实践："><a href="#1-最佳实践：" class="headerlink" title="1.最佳实践："></a>1.最佳实践：</h4><p>1）master分支十分稳定，用来发布新版本</p><p>2）dev是用来工作的分支</p><p>3）团队成员有自己的分支，往dev上合并</p><h4 id="2-bug分支"><a href="#2-bug分支" class="headerlink" title="2.bug分支"></a>2.bug分支</h4><p><code>git stash</code>    //保护现场</p><p><code>git checkout &lt;branchname&gt;</code>    //选择在哪个分支上修复bug</p><p><code>git checkout -b &lt;name&gt;</code>    //创建分支</p><p><code>git checkout &lt;branchname&gt;</code>    //切换回原来的分支</p><p><code>git merge --no-ff -m &#39;XXX&#39; &lt;name&gt;</code>    //采用–no-ff方式合并分支</p><p><code>git branch -d &lt;name&gt;</code>    //合并完，删除分支</p><p><code>git checkout &lt;branchname&gt;</code>    //切换到原来工作的分支上</p><p><code>git stash list</code>     //查看现场</p><p>//恢复现场</p><h5 id="1）"><a href="#1）" class="headerlink" title="1）"></a>1）</h5><p><code>git stash apply</code>     //恢复</p><p><code>git stash drop</code>    //删除stash内容</p><h5 id="2）"><a href="#2）" class="headerlink" title="2）"></a>2）</h5><p><code>git stash pop</code>    //恢复的同时把stash内容也删除了</p><p>ps:可以多次恢复，然后统一drop</p><p>//恢复指定内容</p><p><code>git stash</code>     //查看</p><p><code>git stash apply stash @{0}</code>    //恢复指定内容</p><p>//丢弃一个没有合并过的分支</p><p><code>git branch -D &lt;branchname&gt;</code></p><h3 id="八、多人协作"><a href="#八、多人协作" class="headerlink" title="八、多人协作"></a>八、多人协作</h3><p><code>git remote</code>    //查看远程看的信息</p><p><code>git remote -v</code>    //显示更详细的信息</p><p><code>git push origin &lt;branchname&gt;</code>    //推送分支</p><p><code>git checkout -b &lt;localbranchname&gt; &lt;remotename&gt;/&lt;remotebranchname&gt;</code>    //创建远程的dev分支到本地</p><h4 id="？两人提交的代码有冲突怎么办"><a href="#？两人提交的代码有冲突怎么办" class="headerlink" title="？两人提交的代码有冲突怎么办"></a><em>？两人提交的代码有冲突怎么办</em></h4><p>git pull 会失败</p><p><code>git branch --set-upstream-to = &lt;name&gt;/&lt;branchname&gt; &lt;branchname&gt;</code>    //指定本地branch与远程branch连接</p><p><code>git pull</code>    //再pull</p><h3 id="九、Rebase"><a href="#九、Rebase" class="headerlink" title="九、Rebase"></a>九、Rebase</h3><p>先<code>pull</code>别人的然后再<code>git rebase</code>。</p><p>作用：好看！把本地未push的分叉提交历史整理成直线，使查看历史提交变化时更容易。</p><h3 id="十、标签管理"><a href="#十、标签管理" class="headerlink" title="十、标签管理"></a>十、标签管理</h3><h4 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1.创建标签"></a>1.创建标签</h4><p><code>git checkout &lt;branchname&gt;</code>    //先切换到该分支上</p><p><code>git tag &lt;tagname&gt;</code>    //打标签</p><p><code>git tag</code>    //查看所有标签</p><p>ps:默认标签是打在最新提交的commit上</p><p>若想在之前的commit上打标签，先找到历史提交的commit id</p><p><code>git tag &lt;tagname&gt; &lt;id&gt;</code></p><p><code>git show &lt;tagname&gt;</code>    //查看标签信息</p><p><code>git tag -a &lt;tagname&gt; -m &#39;XXX&#39; &lt;id&gt;</code>    //创建带有说明的标签</p><p>ps:标签总是和某个commit挂钩的，如果这个commit出现在两个不同的分支，那么这两个分支都可以看到这个标签</p><h4 id="2-操作标签"><a href="#2-操作标签" class="headerlink" title="2.操作标签"></a>2.操作标签</h4><p><code>git tag -d &lt;tagname&gt;</code>    //删除标签</p><p><code>git push &lt;name&gt; &lt;tagname&gt;</code>    //推送某个标签到远程</p><p><code>git push &lt;name&gt; --tags</code>    //推送全部未推送到远程的本地标签</p><p>若标签已推送到远程</p><p><code>git tag -d &lt;tagname&gt;</code>    //先本地删除</p><p><code>git push &lt;name&gt; :refs/tags/&lt;tagname&gt;</code>    //从远程删除</p><p>其他：<code>git remote rm &lt;name&gt;</code>    //删除已有的github远程库</p><h3 id="十一、自定义git"><a href="#十一、自定义git" class="headerlink" title="十一、自定义git"></a>十一、自定义git</h3><h4 id="1-忽略特殊文件"><a href="#1-忽略特殊文件" class="headerlink" title="1.忽略特殊文件"></a>1.忽略特殊文件</h4><p>没懂…</p><p>2.配置别名</p><p><code>git config --global alias.&lt;replacename&gt; &lt;name&gt;</code></p><p>例如：git config –global alias.lg “log –graph –pretty=oneline –abbrev-commit”</p><p>​    输入git lg 即可查看分支合并情况</p><p>配置信息在隐藏目录  .git/config 中</p><p>ps:global参数是全局参数，也就是这些命令在这台电脑的所有git仓库下都有用</p><p>十二、个人遇到的错误及解决办法</p><p>refusing to merge unrelated histories*  本地仓库和远程不是同一个仓库，无法合并两个独立的仓库历史</p><p>解决办法：<code>git pull &lt;name&gt; &lt;branchname&gt; --allow-unrelated-histories</code></p><p>​        <code>git push &lt;name&gt; &lt;localbranch&gt;:&lt;remotebranch&gt;</code></p><h4 id="资源："><a href="#资源：" class="headerlink" title="资源："></a>资源：</h4><p><a href="https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf" target="_blank" rel="noopener">Git Cheat Sheet</a></p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官方网站</a></p><p><a href="https://www.jianshu.com/p/096ba51647e7" target="_blank" rel="noopener">Git标签和分支详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;提交代码三步走：&quot;&gt;&lt;a href=&quot;#提交代码三步走：&quot; class=&quot;headerlink&quot; title=&quot;提交代码三步走：&quot;&gt;&lt;/a&gt;提交代码三步走：&lt;/h3&gt;&lt;h4 id=&quot;添加文件到暂存区：git-add&quot;&gt;&lt;a href=&quot;#添加文件到暂存区：git-</summary>
      
    
    
    
    <category term="常用技能" scheme="http://yoursite.com/categories/常用技能/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>矩阵对角线元素之和</title>
    <link href="http://yoursite.com/2019/07/13/%E7%9F%A9%E9%98%B5%E5%AF%B9%E8%A7%92%E5%85%83%E7%B4%A0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/07/13/%E7%9F%A9%E9%98%B5%E5%AF%B9%E8%A7%92%E5%85%83%E7%B4%A0%E4%B9%8B%E5%92%8C/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-03-01T15:13:45.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="矩阵对角线元素之和"><a href="#矩阵对角线元素之和" class="headerlink" title="矩阵对角线元素之和"></a>矩阵对角线元素之和</h3><p>求一个3*3矩阵对角线元素之和 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input 9 numbers:"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d"</span>,arr[i][j]);</span><br><span class="line"><span class="keyword">if</span>((j+<span class="number">1</span>)% <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">sum += arr[i][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%3d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;矩阵对角线元素之和&quot;&gt;&lt;a href=&quot;#矩阵对角线元素之和&quot; class=&quot;headerlink&quot; title=&quot;矩阵对角线元素之和&quot;&gt;&lt;/a&gt;矩阵对角线元素之和&lt;/h3&gt;&lt;p&gt;求一个3*3矩阵对角线元素之和 。&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>求素数问题</title>
    <link href="http://yoursite.com/2019/07/13/%E6%B1%82%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/13/%E6%B1%82%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-03-01T15:14:00.779Z</updated>
    
    <content type="html"><![CDATA[<h4 id="求素数问题"><a href="#求素数问题" class="headerlink" title="求素数问题"></a>求素数问题</h4><p>判断101-200之间有多少个素数，并输出所有素数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author:zoe</span></span><br><span class="line"><span class="comment">  Date: 2021/3/1 10:34:34</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">101</span>;i &lt;= <span class="number">200</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">2</span>;j &lt;= <span class="built_in">sqrt</span>((<span class="keyword">double</span>)(i+<span class="number">1</span>));j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%j == <span class="number">0</span>)&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">count ++;</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%d"</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="知识拓展：sqrt函数"><a href="#知识拓展：sqrt函数" class="headerlink" title="知识拓展：sqrt函数"></a>知识拓展：sqrt函数</h5><p>头文件：math.h</p><p>函数原型：double sqrt(double x)</p><p>返回值：X的平方值</p><p>这里 i 是 int 类型要强制转换成 double型，但如果只写成 <code>sqrt(i+1)</code>也是可以的，int型可以自动转换成double型，这里使用 <code>i+1</code>而不是 <code>i</code>是为了让 <code>sqrt</code>的计算结果更大，不至于遗漏。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;求素数问题&quot;&gt;&lt;a href=&quot;#求素数问题&quot; class=&quot;headerlink&quot; title=&quot;求素数问题&quot;&gt;&lt;/a&gt;求素数问题&lt;/h4&gt;&lt;p&gt;判断101-200之间有多少个素数，并输出所有素数。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>求水仙花数</title>
    <link href="http://yoursite.com/2019/07/13/%E6%B1%82%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/"/>
    <id>http://yoursite.com/2019/07/13/%E6%B1%82%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-03-01T15:13:52.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求水仙花数"><a href="#求水仙花数" class="headerlink" title="求水仙花数"></a>求水仙花数</h3><p>水仙花数（Narcissistic number）又被称为阿姆斯特朗数（Armstrong number）。水仙花数是指一个3位数，它的每个位上的数字的3次幂之和等于它本身（例如：1^3 + 5^3+ 3^3 = 153）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(num &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">i = num % <span class="number">10</span>;</span><br><span class="line">j = (num/<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">k = (num/<span class="number">10</span>)/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(i*i*i + j*j*j + k*k*k == num)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,num);</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;求水仙花数&quot;&gt;&lt;a href=&quot;#求水仙花数&quot; class=&quot;headerlink&quot; title=&quot;求水仙花数&quot;&gt;&lt;/a&gt;求水仙花数&lt;/h3&gt;&lt;p&gt;水仙花数（Narcissistic number）又被称为阿姆斯特朗数（Armstrong number）。水仙花数</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>猴子吃桃问题</title>
    <link href="http://yoursite.com/2019/07/13/%E7%8C%B4%E5%AD%90%E5%90%83%E6%A1%83%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/13/%E7%8C%B4%E5%AD%90%E5%90%83%E6%A1%83%E9%97%AE%E9%A2%98/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-03-01T15:13:37.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="猴子吃桃问题"><a href="#猴子吃桃问题" class="headerlink" title="猴子吃桃问题"></a>猴子吃桃问题</h3><p>猴子吃桃问题：猴子第一天吃了若干个桃子，当即吃了一半，还不解馋，又多吃了一个； 第二天，吃剩下的桃子的一半，还不过瘾，又多吃了一个；以后每天都吃前一天剩下的一半多一个，到第10天想再吃时，只剩下一个桃子了。问第一天共吃了多少个桃子？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">left = <span class="number">2</span>*(left + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the first day ate %d peaches\n"</span>,left/<span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;猴子吃桃问题&quot;&gt;&lt;a href=&quot;#猴子吃桃问题&quot; class=&quot;headerlink&quot; title=&quot;猴子吃桃问题&quot;&gt;&lt;/a&gt;猴子吃桃问题&lt;/h3&gt;&lt;p&gt;猴子吃桃问题：猴子第一天吃了若干个桃子，当即吃了一半，还不解馋，又多吃了一个； 第二天，吃剩下的桃子的一半，</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>自由落体计算</title>
    <link href="http://yoursite.com/2019/07/13/%E8%87%AA%E7%94%B1%E8%90%BD%E4%BD%93%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2019/07/13/%E8%87%AA%E7%94%B1%E8%90%BD%E4%BD%93%E8%AE%A1%E7%AE%97/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-03-01T15:14:27.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自由落体计算"><a href="#自由落体计算" class="headerlink" title="自由落体计算"></a>自由落体计算</h3><p>一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">double</span> hight = <span class="number">100.0</span>;</span><br><span class="line"><span class="keyword">double</span> sum = hight;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">hight /= <span class="number">2</span>;</span><br><span class="line">sum += <span class="number">2</span>*hight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"distance: %f,bounce hight:%f\n"</span>,sum,hight/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><p>计算路程的时候忘记算落下的路程，只计算了反弹的路程。</p><p>另外，循环的次数容易弄错，for循环中只计算了9次反弹，所以第10次反弹要另外算一次。</p><p>正确画图有利于解题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;自由落体计算&quot;&gt;&lt;a href=&quot;#自由落体计算&quot; class=&quot;headerlink&quot; title=&quot;自由落体计算&quot;&gt;&lt;/a&gt;自由落体计算&lt;/h3&gt;&lt;p&gt;一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10</summary>
      
    
    
    
    <category term="C语言基础编程题" scheme="http://yoursite.com/categories/C语言基础编程题/"/>
    
    
    <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
