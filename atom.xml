<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一颗土豆子</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-15T09:09:35.094Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zoe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitignore和Gitmoji的使用</title>
    <link href="http://yoursite.com/2019/10/12/gitignore%E5%92%8CGitmoji%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/12/gitignore%E5%92%8CGitmoji%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-10-12T11:52:56.000Z</published>
    <updated>2021-01-15T09:09:35.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitignore和Gitmoji的使用"><a href="#gitignore和Gitmoji的使用" class="headerlink" title=".gitignore和Gitmoji的使用"></a>.gitignore和Gitmoji的使用</h3><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208" target="_blank" rel="noopener">廖雪峰老师的git教程</a></p><h4 id="gitignore实践"><a href="#gitignore实践" class="headerlink" title=".gitignore实践"></a>.gitignore实践</h4><p>例如现在在这个文件目录中想提交所有的类型名为.c的文件，.exe的文件不提交。</p><h5 id="1-创建-gitignore文件"><a href="#1-创建-gitignore文件" class="headerlink" title="1.创建.gitignore文件"></a>1.创建.gitignore文件</h5><p>方法：在目标文件的根目录下新建一个文本文档，文件夹命名时输入 <code>.gitignore.</code>，注意后面有个点。</p><h5 id="2-添加需要忽略上传的文件"><a href="#2-添加需要忽略上传的文件" class="headerlink" title="2.添加需要忽略上传的文件"></a>2.添加需要忽略上传的文件</h5><p>打开.gitignore文件，进行编辑，添加要忽略上传的文件或文件夹，例如这里需要忽略test文件夹和.exe文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*.exe</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>这里.exe和test文件就被忽略了，也不会提交到仓库里了。</p><h4 id="Gitmoji的使用"><a href="#Gitmoji的使用" class="headerlink" title="Gitmoji的使用"></a>Gitmoji的使用</h4><p>例如：<code>git commit -m &quot;:bug:just a test!&quot;</code></p><p><img src="/2019/imgs/./1610701526722.png" alt="1610701526722"></p><p><a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">Emoji在这里</a></p><p>以后每次提交代码都是一种乐趣了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gitignore和Gitmoji的使用&quot;&gt;&lt;a href=&quot;#gitignore和Gitmoji的使用&quot; class=&quot;headerlink&quot; title=&quot;.gitignore和Gitmoji的使用&quot;&gt;&lt;/a&gt;.gitignore和Gitmoji的使用&lt;/h3</summary>
      
    
    
    
    <category term="常用技能" scheme="http://yoursite.com/categories/常用技能/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>廖雪峰Git教程笔记整理</title>
    <link href="http://yoursite.com/2019/07/13/git%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/13/git%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</id>
    <published>2019-07-13T04:18:03.000Z</published>
    <updated>2021-02-27T01:41:56.445Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提交代码三步走："><a href="#提交代码三步走：" class="headerlink" title="提交代码三步走："></a>提交代码三步走：</h3><h4 id="添加文件到暂存区：git-add"><a href="#添加文件到暂存区：git-add" class="headerlink" title="添加文件到暂存区：git add"></a>添加文件到暂存区：git add</h4><ol><li>添加一个或多个文件到暂存区：如 <code>git add README hello.php</code></li><li>添加当前目录下的所有文件到暂存区：<code>git add .</code></li><li>添加指定目录到暂存区：<code>git add dir</code></li></ol><h4 id="将暂存区内容添加到本地仓库：git-commit"><a href="#将暂存区内容添加到本地仓库：git-commit" class="headerlink" title="将暂存区内容添加到本地仓库：git commit"></a>将暂存区内容添加到本地仓库：git commit</h4><ol><li>将暂存区的文件全部提交到本地仓库：如<code>git commit -m &#39;message&#39;</code></li><li>提交暂存区的指定文件到仓库区：如<code>git commit text.c -m &#39;message&#39;</code></li><li>修改后不需要执行 <code>git add</code>命令直接来提交：如 <code>git commit -a &#39;message&#39;</code></li></ol><h4 id="上传远程代码并合并：git-push"><a href="#上传远程代码并合并：git-push" class="headerlink" title="上传远程代码并合并：git push"></a>上传远程代码并合并：git push</h4><ol><li>将本地仓库中的代码上传到远程仓库：<code>git push</code></li><li>本地分支版本上传到远程并合并：git push 远程主机名 本地分支名：远程分支名（本地分支名和远程分支名相同的话，可以省略冒号，如 <code>git push origin master</code>)</li></ol><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><p>查看哪些文件修改了：<code>git status</code></p><p>查看修改的内容：<code>git diff</code></p><p>查看提交日志：<code>git log</code></p><p>简化日志信息：<code>git log --pretty=oneline</code></p><h3 id="一、版本管理"><a href="#一、版本管理" class="headerlink" title="一、版本管理"></a>一、版本管理</h3><h4 id="1-把当前版本回退到上一个版本"><a href="#1-把当前版本回退到上一个版本" class="headerlink" title="1.把当前版本回退到上一个版本"></a>1.把当前版本回退到上一个版本</h4><p><code>git reset --hard HEAD^</code></p><p><code>git  &lt;filename&gt;</code>    //查看文件内容</p><h4 id="2-回退到上一个版本之后又想回到这个版本"><a href="#2-回退到上一个版本之后又想回到这个版本" class="headerlink" title="2.回退到上一个版本之后又想回到这个版本"></a>2.回退到上一个版本之后又想回到这个版本</h4><p>找到该版本号（无需写全，只需写前几位，多写几位不然找不到的…）</p><p><code>git reset --hard  &lt;id&gt;</code></p><h4 id="3-当前窗口已关闭，还想回到某一个版本"><a href="#3-当前窗口已关闭，还想回到某一个版本" class="headerlink" title="3.当前窗口已关闭，还想回到某一个版本"></a>3.当前窗口已关闭，还想回到某一个版本</h4><p><code>git reflog</code>    //找到版本id</p><p><code>git reset --hard  &lt;id&gt;</code></p><h3 id="二、工作区与版本库"><a href="#二、工作区与版本库" class="headerlink" title="二、工作区与版本库"></a>二、工作区与版本库</h3><p>理解他们很重要!</p><p>commit 后，用 <code>git diff HEAD -- &lt;filename&gt;</code> 查看工作区和版本库里最新版本的区别。</p><h4 id="1-没使用add和commit"><a href="#1-没使用add和commit" class="headerlink" title="1.没使用add和commit"></a>1.没使用add和commit</h4><p><code>git checkout -- &lt;filename&gt;</code>    //丢弃文件的修改内容</p><h4 id="2-使用了add-，未使用-commit"><a href="#2-使用了add-，未使用-commit" class="headerlink" title="2.使用了add ，未使用 commit"></a>2.使用了add ，未使用 commit</h4><p><code>git reset HEAD &lt;filename&gt;</code>    //相当于撤销掉了add命令</p><h4 id="3-使用了add和commit命令"><a href="#3-使用了add和commit命令" class="headerlink" title="3.使用了add和commit命令"></a>3.使用了add和commit命令</h4><p>版本回退</p><h3 id="三、删除文件"><a href="#三、删除文件" class="headerlink" title="三、删除文件"></a>三、删除文件</h3><p>add和commit 之后想删除文件</p><h4 id="1-确实想删除"><a href="#1-确实想删除" class="headerlink" title="1.确实想删除"></a>1.确实想删除</h4><p><code>git rm &lt;filename&gt;</code></p><p><code>git commit -m &quot;XXX&quot;</code></p><h4 id="2-手滑"><a href="#2-手滑" class="headerlink" title="2.手滑"></a>2.手滑</h4><p><code>git checkout -- &lt;filename&gt;</code>    //一键还原，就是用版本库里的版本替换工作区的版本</p><p>ps:从未添加进版本库里的被删除的文件是无法恢复的!</p><h3 id="四、远程仓库"><a href="#四、远程仓库" class="headerlink" title="四、远程仓库"></a>四、远程仓库</h3><h4 id="1-初始化本地仓库"><a href="#1-初始化本地仓库" class="headerlink" title="1.初始化本地仓库"></a>1.初始化本地仓库</h4><p><code>git init</code></p><h4 id="2-添加远程仓库"><a href="#2-添加远程仓库" class="headerlink" title="2.添加远程仓库"></a>2.添加远程仓库</h4><p><code>git remote add &lt;name&gt; &lt;SSH/Https&gt;</code></p><h4 id="3-把本地库的内容推送到远程库"><a href="#3-把本地库的内容推送到远程库" class="headerlink" title="3.把本地库的内容推送到远程库"></a>3.把本地库的内容推送到远程库</h4><p>如果远程库是空的：<code>git push -u &lt;name&gt; &lt;branchname&gt;</code>    //第一次推送，本地分支与远程分支关联起来</p><p>非空：<code>git push &lt;name&gt; &lt;branchname&gt;</code>    //提交</p><h4 id="4-从远程库克隆"><a href="#4-从远程库克隆" class="headerlink" title="4.从远程库克隆"></a>4.从远程库克隆</h4><p><code>git clone &lt;SSH/Https&gt;</code>    //推荐使用SSH</p><h3 id="五、新建分支"><a href="#五、新建分支" class="headerlink" title="五、新建分支"></a>五、新建分支</h3><h4 id="1-创建分支"><a href="#1-创建分支" class="headerlink" title="1.创建分支"></a>1.创建分支</h4><p><code>git checkout -b &lt;branchname&gt;</code></p><h4 id="2-查看当前分支"><a href="#2-查看当前分支" class="headerlink" title="2.查看当前分支"></a>2.查看当前分支</h4><p><code>git branch</code></p><h4 id="3-切换回某个分支"><a href="#3-切换回某个分支" class="headerlink" title="3.切换回某个分支"></a>3.切换回某个分支</h4><p><code>git checkout &lt;branchname&gt;</code></p><h4 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4.合并分支"></a>4.合并分支</h4><p><code>git merge &lt;branchname&gt;</code></p><p>ps:这种合并是快速合并，另外有 –no-ff方式合并分支</p><p><code>git merge --no-ff -m &#39;XXX&#39; &lt;branchname&gt;</code></p><h4 id="5-合并完分支可以删除分支"><a href="#5-合并完分支可以删除分支" class="headerlink" title="5.合并完分支可以删除分支"></a>5.合并完分支可以删除分支</h4><p><code>git branch -d &lt;branchname&gt;</code>    //删除分支</p><h3 id="六、解决冲突"><a href="#六、解决冲突" class="headerlink" title="六、解决冲突"></a>六、解决冲突</h3><h4 id="1-当两个分支都有了各自的提交"><a href="#1-当两个分支都有了各自的提交" class="headerlink" title="1.当两个分支都有了各自的提交"></a>1.当两个分支都有了各自的提交</h4><p>需要手动修改不同的内容，然后add，commit</p><p>ps: <code>git log --graph --pretty=oneline --abbrev -commit</code></p><h3 id="七、分支管理策略"><a href="#七、分支管理策略" class="headerlink" title="七、分支管理策略"></a>七、分支管理策略</h3><h4 id="1-最佳实践："><a href="#1-最佳实践：" class="headerlink" title="1.最佳实践："></a>1.最佳实践：</h4><p>1）master分支十分稳定，用来发布新版本</p><p>2）dev是用来工作的分支</p><p>3）团队成员有自己的分支，往dev上合并</p><h4 id="2-bug分支"><a href="#2-bug分支" class="headerlink" title="2.bug分支"></a>2.bug分支</h4><p><code>git stash</code>    //保护现场</p><p><code>git checkout &lt;branchname&gt;</code>    //选择在哪个分支上修复bug</p><p><code>git checkout -b &lt;name&gt;</code>    //创建分支</p><p><code>git checkout &lt;branchname&gt;</code>    //切换回原来的分支</p><p><code>git merge --no-ff -m &#39;XXX&#39; &lt;name&gt;</code>    //采用–no-ff方式合并分支</p><p><code>git branch -d &lt;name&gt;</code>    //合并完，删除分支</p><p><code>git checkout &lt;branchname&gt;</code>    //切换到原来工作的分支上</p><p><code>git stash list</code>     //查看现场</p><p>//恢复现场</p><h5 id="1）"><a href="#1）" class="headerlink" title="1）"></a>1）</h5><p><code>git stash apply</code>     //恢复</p><p><code>git stash drop</code>    //删除stash内容</p><h5 id="2）"><a href="#2）" class="headerlink" title="2）"></a>2）</h5><p><code>git stash pop</code>    //恢复的同时把stash内容也删除了</p><p>ps:可以多次恢复，然后统一drop</p><p>//恢复指定内容</p><p><code>git stash</code>     //查看</p><p><code>git stash apply stash @{0}</code>    //恢复指定内容</p><p>//丢弃一个没有合并过的分支</p><p><code>git branch -D &lt;branchname&gt;</code></p><h3 id="八、多人协作"><a href="#八、多人协作" class="headerlink" title="八、多人协作"></a>八、多人协作</h3><p><code>git remote</code>    //查看远程看的信息</p><p><code>git remote -v</code>    //显示更详细的信息</p><p><code>git push origin &lt;branchname&gt;</code>    //推送分支</p><p><code>git checkout -b &lt;localbranchname&gt; &lt;remotename&gt;/&lt;remotebranchname&gt;</code>    //创建远程的dev分支到本地</p><h4 id="？两人提交的代码有冲突怎么办"><a href="#？两人提交的代码有冲突怎么办" class="headerlink" title="？两人提交的代码有冲突怎么办"></a><em>？两人提交的代码有冲突怎么办</em></h4><p>git pull 会失败</p><p><code>git branch --set-upstream-to = &lt;name&gt;/&lt;branchname&gt; &lt;branchname&gt;</code>    //指定本地branch与远程branch连接</p><p><code>git pull</code>    //再pull</p><h3 id="九、Rebase"><a href="#九、Rebase" class="headerlink" title="九、Rebase"></a>九、Rebase</h3><p>先<code>pull</code>别人的然后再<code>git rebase</code>。</p><p>作用：好看！把本地未push的分叉提交历史整理成直线，使查看历史提交变化时更容易。</p><h3 id="十、标签管理"><a href="#十、标签管理" class="headerlink" title="十、标签管理"></a>十、标签管理</h3><h4 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1.创建标签"></a>1.创建标签</h4><p><code>git checkout &lt;branchname&gt;</code>    //先切换到该分支上</p><p><code>git tag &lt;tagname&gt;</code>    //打标签</p><p><code>git tag</code>    //查看所有标签</p><p>ps:默认标签是打在最新提交的commit上</p><p>若想在之前的commit上打标签，先找到历史提交的commit id</p><p><code>git tag &lt;tagname&gt; &lt;id&gt;</code></p><p><code>git show &lt;tagname&gt;</code>    //查看标签信息</p><p><code>git tag -a &lt;tagname&gt; -m &#39;XXX&#39; &lt;id&gt;</code>    //创建带有说明的标签</p><p>ps:标签总是和某个commit挂钩的，如果这个commit出现在两个不同的分支，那么这两个分支都可以看到这个标签</p><h4 id="2-操作标签"><a href="#2-操作标签" class="headerlink" title="2.操作标签"></a>2.操作标签</h4><p><code>git tag -d &lt;tagname&gt;</code>    //删除标签</p><p><code>git push &lt;name&gt; &lt;tagname&gt;</code>    //推送某个标签到远程</p><p><code>git push &lt;name&gt; --tags</code>    //推送全部未推送到远程的本地标签</p><p>若标签已推送到远程</p><p><code>git tag -d &lt;tagname&gt;</code>    //先本地删除</p><p><code>git push &lt;name&gt; :refs/tags/&lt;tagname&gt;</code>    //从远程删除</p><p>其他：<code>git remote rm &lt;name&gt;</code>    //删除已有的github远程库</p><h3 id="十一、自定义git"><a href="#十一、自定义git" class="headerlink" title="十一、自定义git"></a>十一、自定义git</h3><h4 id="1-忽略特殊文件"><a href="#1-忽略特殊文件" class="headerlink" title="1.忽略特殊文件"></a>1.忽略特殊文件</h4><p>没懂…</p><p>2.配置别名</p><p><code>git config --global alias.&lt;replacename&gt; &lt;name&gt;</code></p><p>例如：git config –global alias.lg “log –graph –pretty=oneline –abbrev-commit”</p><p>​    输入git lg 即可查看分支合并情况</p><p>配置信息在隐藏目录  .git/config 中</p><p>ps:global参数是全局参数，也就是这些命令在这台电脑的所有git仓库下都有用</p><p>十二、个人遇到的错误及解决办法</p><p>refusing to merge unrelated histories*  本地仓库和远程不是同一个仓库，无法合并两个独立的仓库历史</p><p>解决办法：<code>git pull &lt;name&gt; &lt;branchname&gt; --allow-unrelated-histories</code></p><p>​        <code>git push &lt;name&gt; &lt;localbranch&gt;:&lt;remotebranch&gt;</code></p><h4 id="资源："><a href="#资源：" class="headerlink" title="资源："></a>资源：</h4><p><a href="https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf" target="_blank" rel="noopener">Git Cheat Sheet</a></p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官方网站</a></p><p><a href="https://www.jianshu.com/p/096ba51647e7" target="_blank" rel="noopener">Git标签和分支详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;提交代码三步走：&quot;&gt;&lt;a href=&quot;#提交代码三步走：&quot; class=&quot;headerlink&quot; title=&quot;提交代码三步走：&quot;&gt;&lt;/a&gt;提交代码三步走：&lt;/h3&gt;&lt;h4 id=&quot;添加文件到暂存区：git-add&quot;&gt;&lt;a href=&quot;#添加文件到暂存区：git-</summary>
      
    
    
    
    <category term="常用技能：" scheme="http://yoursite.com/categories/常用技能：/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
